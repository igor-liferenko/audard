This is a brief readme related to the `run-alsa-pa-tests.sh` script, in this folder (`alsa-patest-duplex`).

The script expects a source-built (and patched for debug output) version of PortAudio, against which to compile the test program in this folder (patest_duplex_wire.c).

This is the development info on which I ran the test:

    $ cat /proc/cpuinfo | grep 'processor\|model name'
    processor	: 0
    model name	: Intel(R) Atom(TM) CPU N450   @ 1.66GHz
    processor	: 1
    model name	: Intel(R) Atom(TM) CPU N450   @ 1.66GHz
    $ uname -a
    Linux ljutntcol 2.6.38-16-generic #67-Ubuntu SMP Thu Sep 6 18:00:43 UTC 2012 i686 i686 i386 GNU/Linux
    $ cat /etc/issue
    Ubuntu 11.04 \n \l
    $ echo $(lsb_release -a 2>/dev/null | tr '\n' ' ')
    Distributor ID: Ubuntu Description: Ubuntu 11.04 Release: 11.04 Codename: natty
    $ audacity -version
    Audacity v1.3.13-beta (Unicode)
    $ aplay --version  # returns ALSA version
    aplay: version 1.0.24.2 by Jaroslav Kysela <perex@perex.cz>

I obtained PortAudio source as part of the Audacity source, available in Ubuntu Natty:

    $ cd /wherever/src
    $ apt-get source audacity
    $ rm audacity_1.3.13-3ubuntu1.debian.tar.gz audacity_1.3.13-3ubuntu1.dsc audacity_1.3.13.orig.tar.bz2
    $ cp audacity-1.3.13 audacity-1.3.13-orig

The patch present in the `alsa-patest-duplex` folder, `audacity-portaudio.patch` is obtained at this location (`/wherever/src`) with:

    diff -Naur -x '*.lo' -x '*.la' -x '*.o' -x '*m4*' -x '*.log' -x '.libs' -x 'bin' -x '*.guess' -x '*.status' -x '*.sub' -x '*sh' -x '*.pc' -x '*.pdf' -x '*.py' -x '*.csv' -x 'test' -x 'libtool' audacity-1.3.13-orig audacity-1.3.13 > audacity-portaudio.patch

... and then manually edited to include only relevant hunks.

The PortAudio library is in the folder audacity-1.3.13/lib-src/portaudio-v19.

The patch `audacity-portaudio.patch` includes changes to `./configure`, so a `--enable-debug-logapi` switch is added (not sure if just patching `configure.in` is enough; or if `./configure` also needs to be also patched separately; both are included). It also adds a line to `Makefile.in`, so the file `patest_duplex_wire.c` is also compiled as part of the tests of PortAudio. Finally, it adds extra debug statements to `portaudio-v19/src/hostapi/alsa/pa_linux_alsa.c`, which are written to ftrace (/sys/kernel/debug/tracing/trace; this ubuntu version has kernel debug tracing enabled by default).

To build PortAudio here, this should be enough:

    $ sudo apt-get build-dep audacity
    $ cd /wherever/src/audacity-1.3.13
    # apply patch:
    $ patch -p1 </path/to/alsa-patest-duplex/audacity-portaudio.patch
    patching file lib-src/portaudio-v19/configure
    patching file lib-src/portaudio-v19/configure.in
    patching file lib-src/portaudio-v19/Makefile.in
    patching file lib-src/portaudio-v19/src/hostapi/alsa/pa_linux_alsa.c
    # go to portaudio folder:
    $ cd /wherever/src/audacity-1.3.13/lib-src/portaudio-v19/
    # there is no Makefile by default here;
    # has to be generated by configure; but that also needs:
    $ libtoolize --force
    $ aclocal
    $ autoconf
    $ ./configure --enable-debug-output --enable-debug-logapi
    # now, there is no /test/ folder either; download from
    # https://www.assembla.com/code/portaudio/subversion/nodes/1748/portaudio/trunk/test#
    # and unpack it as folder test/ here...
    # remember to symlink/copy patest_duplex_wire.c in test/ too
    # also, patch Makefile here (so we can override CFLAGS on command line for tests later):
    sed -n 's/^CFLAGS =/override CFLAGS +=/p' Makefile
    sed -i 's/^CFLAGS =/override CFLAGS +=/' Makefile
    # now should be able to run `make`, which will also build files in test/
    $ make
    # to test, run from this location:
    $ ./bin/patest_duplex_wire
    # (it is a bash script, which loads the built PA library, along with the
    # executable - it should generate verbose output, because of enabled debug)

It is probably easiest to add a symlink to the `patest_duplex_wire.c` in this `alsa-patest-duplex` folder, for PortAudio (instead of copying):

   $ ln -s /path/to/alsa-patest-duplex/patest_duplex_wire.c /wherever/src/audacity-1.3.13/lib-src/portaudio-v19/test/

... and then relink the ./bin/patest_duplex_wire back in this folder (note, this will also be asked for, by the `run-alsa-pa-tests.sh` script itself)

Note that `patest_duplex_wire` hardcodes the path (PLAYFILE) for the (raw) file that is used as input for playback; for it, use the `out16s.dat` in this folder - possibly copy it somewhere, and then enter the full path to `out16s.dat` as PLAYFILE in patest_duplex_wire.c - and then recompile.

Note that `patest_duplex_wire` hardcodes the device number as 1; because on my system I already have a soundcard, so loading the `snd_dummy` driver after that, would make the dummy driver be card/device number 1; in my case, this situation is listed as:

    $ aplay -l
    **** List of PLAYBACK Hardware Devices ****
    card 0: Intel [HDA Intel], device 0: ALC269 Analog [ALC269 Analog]
      Subdevices: 1/1
      Subdevice #0: subdevice #0
    card 1: Dummy [Dummy], device 0: Dummy PCM [Dummy PCM]
      Subdevices: 8/8
      Subdevice #0: subdevice #0
      Subdevice #1: subdevice #1
      Subdevice #2: subdevice #2
      Subdevice #3: subdevice #3
      Subdevice #4: subdevice #4
      Subdevice #5: subdevice #5
      Subdevice #6: subdevice #6
      Subdevice #7: subdevice #7

If there is no card 1 present, `patest_duplex_wire` will fail with: "An error occured while using the portaudio stream; Error number: -9998; Error message: Invalid number of channels".

To build and load the `snd_dummy` driver, simply issue in this folder (`alsa-patest-duplex`):

    $ make                        # to build the driver/kernel module
    $ sudo insmod ./snd-dummy.ko  # to  load the driver/kernel module

With the driver loaded, and an existing input file at PLAYFILE path - `patest_duplex_wire` should complete succesfully.


At this point, it should be possible to run the `run-alsa-pa-tests.sh`, which will: compile the "snd_dummy" driver, and the `patest_duplex_wire` program - with different options - and obtain corresponding logs.

----

To perform a test run (provided everything is set up) - simply call in this folder:

    bash run-alsa-pa-tests.sh

To perform a test run and capture its log, call the `run-alsa-pa-tests.sh` with (note use of `stdbuf` to force grep to use line buffering, so the terminal output updates properly):

    bash run-alsa-pa-tests.sh 2>&1 | stdbuf -oL grep -v "Parsed line" | tee runtest.log ; mv runtest.log captures/

or better:

    bash run-alsa-pa-tests.sh 2>&1 | tee runtest.log ; sed -i '/Parsed line/d' runtest.log ; mv runtest.log captures/


`run-alsa-pa-tests.sh` hardcodes the location of the portaudio library - make sure you change it accordingly!
`run-alsa-pa-tests.sh` also needs a symlink to the compiled script /wherever/src/audacity-1.3.13/lib-src/portaudio-v19/bin/patest_duplex_wire in this directory (`alsa-patest-duplex`).

`run-alsa-pa-tests.sh` uses `traceLogfile2Csv.py`, which has been tested under python 2.7 - but should also work under python 3.2.
* the python script performs sorting, as I've occasionally gotten rows out of order (but with correct timestamps) from trace_pipe

You can view the raw captures (duwrecorded*.raw) with a `gnuplot` line as given in `run-alsa-pa-tests.sh` ; or you can import them in Audacity: File / Import / Raw Data ... / Encoding "Signed 16 bit PCM" ; Byte order "No endianness" ; Channels: Stereo ; Sample rate: 44100


`run-alsa-pa-tests.sh` should generate *.csv files in a captures/ subfolder if it completes succesfully. These can then be plotted using the `gnuplot` script `traceLogGraph.gp` (which also calls `awk`) - or in a batch job calling it, using the script `batch_traceLogFile.sh` (see the respective scripts for more). Note that, if running the test, then one should first call `run-alsa-pa-tests.sh` to obtain the final *.csv names; and then those names need to be edited inside `traceLogGraph.gp` and placed in the required conditional plot (mostly depending on appearance of "full duplex drops")


The file `captures01-04.tar.gz` contains complete logs from four runs of `run-alsa-pa-tests.sh` (NB: +70MB expanded), with respective `traceLogGraph.gp` gnuplot scripts that allow for reconstruction of all .png images; while the `captures_0*/` directories contain only some .pngs. So to re-create all the .png's; copy the right `traceLogGraph.gp` file, and then simply call:

    bash batch_traceLogFile.sh

On the development platform, `gnuplot` 4.6 patchlevel 1 was used (note gnuplot 4.4 may be the minimum version required).


