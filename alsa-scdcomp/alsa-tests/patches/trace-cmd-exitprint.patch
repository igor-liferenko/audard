diff --git a/trace-ftrace.c b/trace-ftrace.c
index 2c4d255..f59711a 100644
--- a/trace-ftrace.c
+++ b/trace-ftrace.c
@@ -32,11 +32,18 @@ struct plugin_option trace_ftrace_options[] = {
 		"Print function name at function exit in function graph",
 	},
 	{
+		.name = "exitprint",
+		.plugin_alias = "fgraph",
+		.description =
+		"Print all data (call timestamp, duration) at function exit; but print nothing at function entry",
+	},
+	{
 		.name = NULL,
 	}
 };
 
 static struct plugin_option *fgraph_tail = &trace_ftrace_options[0];
+static struct plugin_option *fgraph_exit = &trace_ftrace_options[1];
 
 static void find_long_size(struct tracecmd_ftrace *finfo)
 {
@@ -292,7 +299,7 @@ fgraph_ent_handler(struct trace_seq *s, struct pevent_record *record,
 		print_graph_entry_leaf(s, event, record, rec, finfo);
 		free_record(rec);
 	} else
-		print_graph_nested(s, event, record);
+		if (!fgraph_exit->set) { print_graph_nested(s, event, record); }
 
 	return 0;
 }
@@ -333,13 +340,18 @@ fgraph_ret_handler(struct trace_seq *s, struct pevent_record *record,
 
 	trace_seq_putc(s, '}');
 
-	if (fgraph_tail->set) {
+	if ((fgraph_tail->set) || (fgraph_exit->set)) {
 		if (pevent_get_field_val(s, event, "func", record, &val, 0))
 			return 0;
 		func = pevent_find_function(event->pevent, val);
 		if (!func)
 			return 0;
-		trace_seq_printf(s, " /* %s */", func);
+    if (fgraph_exit->set) {
+      //~ trace_seq_printf(s, " / %s / %llu / %llu /", func, calltime, rettime ); // secs, usecs
+      trace_seq_printf(s, " / %s / %llu.%06llu /", func, (unsigned long long)calltime/1000000000L, (unsigned long long)((calltime%1000000000L)/1000L) ); // secs, usecs
+    } else {
+      trace_seq_printf(s, " /* %s */", func);
+    }
 	}
 
 	return 0;
