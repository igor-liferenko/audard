#N canvas 276 84 711 515 10;
#X floatatom 353 197 12 0 0 0 - - -;
#X obj 300 246 expr 44100 / $f1;
#X floatatom 336 303 12 0 0 0 - - -;
#X obj 298 455 phasor~;
#X obj 299 501 *~;
#X msg 386 425 0;
#X msg 423 425 0.5;
#X text 307 583 audio is here;
#X text 349 454 signal only from 0 to 1;
#X text 383 408 skip to start/half of file;
#X floatatom 663 527 12 0 0 0 - - -;
#X obj 514 524 snapshot~;
#X obj 514 472 metro 40;
#X obj 503 450 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 550 540 gauge is discrete in 0 to 1 \,;
#X obj 514 545 * 332;
#X text 550 549 so multiply here (width pixels);
#X obj 39 81 print rotknob;
#X floatatom 27 139 8 0 0 0 - - -;
#X floatatom 84 139 8 0 0 0 - - -;
#X obj 27 114 unpack f f;
#X obj 166 214 sig~;
#X obj 166 190 line 0 40;
#X obj 84 190 vline~;
#X msg 84 164 \$1 30;
#X obj 83 223 lop~ 20;
#X text 377 151 [msecs];
#X obj 300 174 expr 16*$f1*44100/1000;
#X obj 300 202 t f f;
#X msg 299 565 tabread4~ array1;
#X text 305 546 (would have gone to tabread4~);
#X text 305 517 this is "position" \; (index into array) signal;
#X obj 37 540 nthreshold~;
#X msg 45 513 setrange 0 1;
#X obj 27 440 loadbang;
#X obj 27 465 t b b;
#X msg 35 490 setnparts 16;
#X floatatom 37 573 5 0 0 0 - - -;
#X obj 448 75 pddp/dsp;
#X msg 528 259 jam \$1;
#X floatatom 538 238 5 0 0 0 - - -;
#X text 576 233 set counter \; to nr. and \; output \; immediately
;
#X obj 336 270 t f f;
#X obj 518 297 expr ($f1/16);
#X obj 594 522 snapshot~;
#X obj 594 619 *;
#X text 689 595 seq BPM;
#X text 659 482 rel. to deflt RPM;
#X obj 594 643 makefilename %.4g;
#X text 623 627 num. format specifier;
#X obj 27 57 r srotknobctrl\$1;
#X obj 300 152 r n16thDur\$1;
#X obj 518 215 r radstep\$1;
#X obj 77 572 s rspdstep\$1;
#X obj 524 449 r nTogRunSq\$1;
#X obj 514 566 s rgauge\$1;
#X obj 101 251 s~ rspd\$1;
#X obj 353 219 s sampleSize\$1;
#X obj 334 481 r sampleSize\$1;
#X obj 636 596 r nBPM\$1;
#X obj 594 674 s rtextabpm\$1;
#X text 24 381 even if we use backbuffer (in which \; case we don't
need nthreshold~ to trigger \; we'd still need nthreshold~ in order
to \; render the GUI seq. radio buttons crctly!;
#X text 15 5 turntable (and step) controller (turntableCtl);
#X text 34 553 was [pd setcurstep]:;
#X obj 139 808 prepend setstep;
#X floatatom 341 656 5 0 0 0 - - -;
#X obj 341 636 count 16;
#X text 397 634 modulo counter;
#X obj 189 645 metro 100;
#X obj 189 744 counter 0 15;
#X msg 210 712 jam \$1;
#X floatatom 220 691 5 0 0 0 - - -;
#X text 258 704 set counter to nr. and \; output immediately;
#X text 338 604 cannot use count: is too simple \; and cannot "jam"
a value instantly;
#X obj 89 784 t f f;
#X floatatom 209 764 5 0 0 0 - - -;
#X obj 89 683 spigot;
#X obj 28 653 r rspdstep\$1;
#X obj 133 611 r nTogRunSq\$1;
#X obj 240 619 r n16thDur\$1;
#X obj 210 668 r radstep\$1;
#X obj 139 831 s rseqintf\$1;
#X obj 59 831 s curstep\$1;
#X text 14 18 instantiate as [.. deck-id]:;
#X text 14 28 [ttsq_ttableStepCtl 0];
#X text 374 332 subpatch \, inherits \; parent abstrct. args;
#X obj 514 493 t b b b;
#N canvas 110 127 762 446 scrubber_trspd 0;
#X text 17 20 expecting here arg \$1 to be deckid (0-based) \; inherited
from parent abstraction;
#X floatatom 274 311 12 0 0 0 - - -;
#X obj 286 406 *~;
#X obj 468 286 delta;
#X floatatom 468 342 9 0 0 0 - - -;
#X obj 468 389 vline~;
#X floatatom 468 256 9 0 0 0 - - -;
#X obj 354 458 *~;
#X floatatom 394 433 5 0 0 0 - - -;
#X floatatom 354 433 5 0 0 0 - - -;
#X obj 418 458 *~;
#X obj 383 486 +~;
#X text 322 337 spigot/gate/switch for;
#X text 322 347 scrub/rotate velo;
#X obj 185 134 prepend set;
#X msg 185 167 0.496552;
#X obj 265 114 sel 1;
#X msg 468 233 0.496552;
#X text 533 227 trick is \; must resample @40 ms \; here as well!;
#X obj 354 388 expr 1-$f1 \; $f1;
#X obj 265 93 t f b f;
#X obj 265 142 t b b b;
#X text 399 178 another trick - on left down \; make sure that this
part is banged twice \; to avoid jumps in the delta!;
#X obj 468 319 / 0.04;
#X msg 468 367 \$1 40;
#X text 511 272 the subtract oscillates \; the delta is ok but late
a bit \; looks like its just PyGUI late;
#X text 18 8 scrubber algo implementation \, driven by image clicks
;
#X obj 487 122 inlet;
#X text 49 68 expr 44100 / $f1 \; expected here;
#X obj 50 100 inlet;
#X obj 185 90 r scxrel\$1;
#X obj 265 73 r scxclk\$1;
#X obj 254 365 r~ rspd\$1;
#X obj 384 512 s~ trspd\$1;
#X text 406 104 [metro 40] expected \; on this inlet;
#X floatatom 185 188 5 0 0 0 - - -;
#X obj 50 230 outlet;
#X text 449 512 to phasor~ (left inlet);
#X text 49 248 to phasor~ (right inlet) \; directly;
#X text 178 57 scrub click data from image;
#X connect 1 0 2 1;
#X connect 2 0 7 0;
#X connect 3 0 23 0;
#X connect 4 0 24 0;
#X connect 5 0 10 0;
#X connect 6 0 3 0;
#X connect 7 0 11 0;
#X connect 8 0 10 1;
#X connect 9 0 7 1;
#X connect 10 0 11 1;
#X connect 11 0 33 0;
#X connect 14 0 15 0;
#X connect 14 0 17 0;
#X connect 15 0 35 0;
#X connect 16 0 21 0;
#X connect 17 0 6 0;
#X connect 19 0 9 0;
#X connect 19 1 8 0;
#X connect 20 0 16 0;
#X connect 20 2 19 0;
#X connect 21 0 15 0;
#X connect 21 1 17 0;
#X connect 21 2 17 0;
#X connect 23 0 4 0;
#X connect 24 0 5 0;
#X connect 27 0 17 0;
#X connect 29 0 1 0;
#X connect 30 0 14 0;
#X connect 31 0 20 0;
#X connect 32 0 2 0;
#X connect 35 0 36 0;
#X restore 376 363 pd scrubber_trspd;
#X obj 226 256 r~ trspd\$1;
#X obj 595 484 r~ trspd\$1;
#X obj 594 579 /;
#X text 618 578 trspd~ correction (to 1);
#X obj 325 389 s phri\$1;
#X obj 309 425 r phri\$1;
#X text 378 387 phasor right inlet;
#X connect 0 0 57 0;
#X connect 1 0 42 0;
#X connect 2 0 87 0;
#X connect 2 0 90 1;
#X connect 3 0 4 0;
#X connect 3 0 11 0;
#X connect 3 0 32 0;
#X connect 5 0 92 0;
#X connect 6 0 92 0;
#X connect 11 0 15 0;
#X connect 12 0 86 0;
#X connect 13 0 12 0;
#X connect 15 0 55 0;
#X connect 19 0 24 0;
#X connect 20 0 18 0;
#X connect 20 1 19 0;
#X connect 22 0 21 0;
#X connect 23 0 25 0;
#X connect 24 0 22 0;
#X connect 24 0 23 0;
#X connect 25 0 56 0;
#X connect 27 0 28 0;
#X connect 28 0 1 0;
#X connect 28 1 0 0;
#X connect 32 0 37 0;
#X connect 33 0 32 0;
#X connect 34 0 35 0;
#X connect 35 0 36 0;
#X connect 35 1 33 0;
#X connect 36 0 32 0;
#X connect 37 0 53 0;
#X connect 42 1 2 0;
#X connect 43 0 92 0;
#X connect 44 0 90 0;
#X connect 45 0 48 0;
#X connect 48 0 60 0;
#X connect 50 0 20 0;
#X connect 51 0 27 0;
#X connect 52 0 40 0;
#X connect 52 0 39 0;
#X connect 52 0 43 0;
#X connect 54 0 13 0;
#X connect 58 0 4 1;
#X connect 59 0 45 1;
#X connect 64 0 81 0;
#X connect 66 0 65 0;
#X connect 68 0 69 0;
#X connect 69 0 75 0;
#X connect 70 0 69 0;
#X connect 74 0 82 0;
#X connect 74 1 64 0;
#X connect 76 0 74 0;
#X connect 77 0 76 0;
#X connect 78 0 68 0;
#X connect 78 0 76 1;
#X connect 79 0 68 1;
#X connect 80 0 71 0;
#X connect 80 0 70 0;
#X connect 86 0 11 0;
#X connect 86 1 44 0;
#X connect 86 2 87 1;
#X connect 87 0 92 0;
#X connect 88 0 3 0;
#X connect 89 0 44 0;
#X connect 90 0 45 0;
#X connect 93 0 3 1;
